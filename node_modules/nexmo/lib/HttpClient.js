"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var https = require("https");
var http = require("http");
var request = require("request");
var querystring = require("querystring");

var HttpClient = function () {
  function HttpClient(options, credentials) {
    _classCallCheck(this, HttpClient);

    this.credentials = credentials;
    this.host = options.host || "rest.nexmo.com";
    this.port = options.port || 443;
    this.https = options.https || https;
    this.http = options.http || http;
    this.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json"
    };
    this.logger = options.logger;
    this.timeout = options.timeout;
    this.requestLib = request;

    if (options.userAgent) {
      this.headers["User-Agent"] = options.userAgent;
    }
  }

  _createClass(HttpClient, [{
    key: "request",
    value: function request(endpoint, method, callback) {
      var _this = this;

      var skipJsonParsing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (typeof method === "function") {
        callback = method;
        endpoint.method = endpoint.method || "GET";
      } else if (typeof method !== "undefined") {
        endpoint.method = method;
      }

      if (endpoint.method === "POST" || endpoint.method === "DELETE") {
        // TODO: verify the following fix is required
        // Fix broken due ot 411 Content-Length error now sent by Nexmo API
        // PL 2016-Sept-6 - commented out Content-Length 0
        // headers['Content-Length'] = 0;
      }
      var options = {
        host: endpoint.host ? endpoint.host : this.host,
        port: this.port,
        path: endpoint.path,
        method: endpoint.method,
        headers: Object.assign({}, this.headers)
      };

      if (this.timeout !== undefined) {
        options.timeout = this.timeout;
      }

      // Allow existing headers to be overridden
      // Allow new headers to be added
      if (endpoint.headers) {
        Object.keys(endpoint.headers).forEach(function (key) {
          options.headers[key] = endpoint.headers[key];
        });
      }

      if (this.credentials.signatureSecret && this.credentials.signatureMethod) {
        var splitPath = options.path.split(/\?(.+)/);
        var path = splitPath[0];

        var params = querystring.decode(splitPath[1]);

        // add timestamp if not already present
        if (!params.timestamp) {
          params.timestamp = new Date().getTime() / 1000 | 0; // floor to seconds
          params.timestamp = params.timestamp.toString();
        }

        // strip API Secret
        delete params.api_secret;

        var hash = this.credentials.generateSignature(params);

        var query = "";

        // rebuild query
        Object.keys(params).sort().forEach(function (key) {
          query += "&" + key + "=" + params[key];
        });

        // replace the first & with ?
        query = query.replace(/&/i, "?");

        options.path = "" + path + query + "&sig=" + hash;
      }

      this.logger.info("Request:", options, "\nBody:", endpoint.body);
      var request;

      if (options.port === 443) {
        request = this.https.request(options);
      } else {
        request = this.http.request(options);
      }

      request.end(endpoint.body);

      // Keep an array of String or Buffers,
      // depending on content type (binary or JSON) of response
      var responseData = [];

      request.on("response", function (response) {
        var isBinary = response.headers["content-type"] === "application/octet-stream";
        if (!isBinary) {
          response.setEncoding("utf8");
        }

        response.on("data", function (chunk) {
          responseData.push(chunk);
        });

        response.on("end", function () {
          _this.logger.info("response ended:", response.statusCode);
          if (callback) {
            if (isBinary) {
              responseData = Buffer.concat(responseData);
            }

            _this.__parseResponse(response, responseData, endpoint.method, callback, skipJsonParsing);
          }
        });
        response.on("close", function (e) {
          if (e) {
            _this.logger.error("problem with API request detailed stacktrace below ");
            _this.logger.error(e);
            callback(e);
          }
        });
      });
      request.on("error", function (e) {
        _this.logger.error("problem with API request detailed stacktrace below ");
        _this.logger.error(e);
        callback(e);
      });
    }
  }, {
    key: "__parseResponse",
    value: function __parseResponse(httpResponse, data, method, callback, skipJsonParsing) {
      var isArrayOrBuffer = data instanceof Array || data instanceof Buffer;
      if (!isArrayOrBuffer) {
        throw new Error("data should be of type Array or Buffer");
      }

      var status = httpResponse.statusCode;
      var headers = httpResponse.headers;

      var response = null;
      var error = null;

      try {
        if (status >= 500) {
          error = {
            message: "Server Error",
            statusCode: status
          };
        } else if (httpResponse.headers["content-type"] === "application/octet-stream") {
          response = data;
        } else if (status === 429) {
          // 429 does not return a parsable body
          if (!headers["retry-after"]) {
            // retry based on allowed per second
            var retryAfterMillis = method === "POST" ? 1000 / 2 : 1000 / 5;
            headers["retry-after"] = retryAfterMillis;
          }
          error = {
            body: data.join("")
          };
        } else if (status === 204) {
          response = null;
        } else if (status >= 400 || status < 200) {
          error = {
            body: JSON.parse(data.join("")),
            headers: headers
          };
        } else if (method !== "DELETE") {
          if (!!skipJsonParsing) {
            response = data.join("");
          } else {
            response = JSON.parse(data.join(""));
          }
        } else {
          response = data;
        }
      } catch (parseError) {
        this.logger.error(parseError);
        this.logger.error("could not convert API response to JSON, above error is ignored and raw API response is returned to client");
        this.logger.error("Raw Error message from API ");
        this.logger.error("\"" + data + "\"");

        error = {
          status: status,
          message: "The API response could not be parsed.",
          body: data.join(""),
          parseError: parseError
        };
      }

      if (error) {
        error.statusCode = status;
        error.headers = headers;
      }

      if (typeof callback === "function") {
        callback(error, response);
      }
    }
  }, {
    key: "_addLimitedAccessMessageToErrors",
    value: function _addLimitedAccessMessageToErrors(callback, limitedAccessStatus) {
      return function (err, data) {
        if (err && err.status == limitedAccessStatus) {
          err._INFO_ = "This endpoint may need activating on your account. Please email support@nexmo.com for more information";
        }

        return callback(err, data);
      };
    }
  }, {
    key: "get",
    value: function get(path, params, callback) {
      var useJwt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var useBasicAuth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if (!callback) {
        if (typeof params == "function") {
          callback = params;
          params = {};
        }
      }

      params = params || {};
      if (!useJwt && !useBasicAuth) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      path = path + "?" + querystring.stringify(params);

      var headers = {
        "Content-Type": "application/json"
      };
      if (useJwt) {
        headers["Authorization"] = "Bearer " + this.credentials.generateJwt();
      }
      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }

      this.request({
        path: path,
        headers: headers
      }, "GET", callback);
    }
  }, {
    key: "delete",
    value: function _delete(path, callback, useJwt, useBasicAuth) {
      var params = {};
      if (!useJwt && !useBasicAuth) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      var headers = {};

      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }
      path = path + "?" + querystring.stringify(params);

      this.request({
        path: path,
        headers: headers
      }, "DELETE", callback);
    }
  }, {
    key: "postFile",
    value: function postFile(path, options, callback, useJwt) {
      var qs = {};
      if (!useJwt) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      if (Object.keys(qs).length) {
        var joinChar = "?";
        if (path.indexOf(joinChar) !== -1) {
          joinChar = "&";
        }
        path = path + joinChar + querystring.stringify(qs);
      }

      var file = options.file;
      delete options.file; // We don't send this as metadata

      var formData = {};

      if (file) {
        formData["filedata"] = {
          value: file,
          options: {
            filename: options.filename || null
          }
        };
      }

      if (options.info) {
        formData.info = JSON.stringify(options.info);
      }

      if (options.url) {
        formData.url = options.url;
      }

      this.requestLib.post({
        url: "https://" + this.host + path,
        formData: formData,
        headers: {
          Authorization: "Bearer " + this.credentials.generateJwt()
        }
      }, callback);
    }
  }, {
    key: "post",
    value: function post(path, params, callback, useJwt) {
      var qs = {};
      if (!useJwt) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      var joinChar = "?";
      if (path.indexOf(joinChar) !== -1) {
        joinChar = "&";
      }

      path = path + joinChar + querystring.stringify(qs);

      this.request({
        path: path,
        body: querystring.stringify(params)
      }, "POST", callback);
    }
  }, {
    key: "postJson",
    value: function postJson(path, params, callback, useJwt, useBasicAuth) {
      var qs = {};
      if (!useJwt && !useBasicAuth) {
        qs["api_key"] = this.credentials.apiKey;
        qs["api_secret"] = this.credentials.apiSecret;
      }

      var joinChar = "?";
      if (path.indexOf(joinChar) !== -1) {
        joinChar = "&";
      }

      path = path + joinChar + querystring.stringify(qs);

      var headers = {
        "Content-Type": "application/json"
      };
      if (useBasicAuth) {
        headers["Authorization"] = "Basic " + Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64");
      }

      this.request({
        path: path,
        body: JSON.stringify(params),
        headers: headers
      }, "POST", callback);
    }
  }, {
    key: "postUseQueryString",
    value: function postUseQueryString(path, params, callback, useJwt) {
      params = params || {};
      if (!useJwt) {
        params["api_key"] = this.credentials.apiKey;
        params["api_secret"] = this.credentials.apiSecret;
      }

      path = path + "?" + querystring.stringify(params);

      this.request({
        path: path
      }, "POST", callback);
    }
  }]);

  return HttpClient;
}();

exports.default = HttpClient;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IdHRwQ2xpZW50LmpzIl0sIm5hbWVzIjpbImh0dHBzIiwicmVxdWlyZSIsImh0dHAiLCJyZXF1ZXN0IiwicXVlcnlzdHJpbmciLCJIdHRwQ2xpZW50Iiwib3B0aW9ucyIsImNyZWRlbnRpYWxzIiwiaG9zdCIsInBvcnQiLCJoZWFkZXJzIiwiQWNjZXB0IiwibG9nZ2VyIiwidGltZW91dCIsInJlcXVlc3RMaWIiLCJ1c2VyQWdlbnQiLCJlbmRwb2ludCIsIm1ldGhvZCIsImNhbGxiYWNrIiwic2tpcEpzb25QYXJzaW5nIiwicGF0aCIsIk9iamVjdCIsImFzc2lnbiIsInVuZGVmaW5lZCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2lnbmF0dXJlU2VjcmV0Iiwic2lnbmF0dXJlTWV0aG9kIiwic3BsaXRQYXRoIiwic3BsaXQiLCJwYXJhbXMiLCJkZWNvZGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiZ2V0VGltZSIsInRvU3RyaW5nIiwiYXBpX3NlY3JldCIsImhhc2giLCJnZW5lcmF0ZVNpZ25hdHVyZSIsInF1ZXJ5Iiwic29ydCIsInJlcGxhY2UiLCJpbmZvIiwiYm9keSIsImVuZCIsInJlc3BvbnNlRGF0YSIsIm9uIiwiaXNCaW5hcnkiLCJyZXNwb25zZSIsInNldEVuY29kaW5nIiwicHVzaCIsImNodW5rIiwic3RhdHVzQ29kZSIsIkJ1ZmZlciIsImNvbmNhdCIsIl9fcGFyc2VSZXNwb25zZSIsImUiLCJlcnJvciIsImh0dHBSZXNwb25zZSIsImRhdGEiLCJpc0FycmF5T3JCdWZmZXIiLCJBcnJheSIsIkVycm9yIiwic3RhdHVzIiwibWVzc2FnZSIsInJldHJ5QWZ0ZXJNaWxsaXMiLCJqb2luIiwiSlNPTiIsInBhcnNlIiwicGFyc2VFcnJvciIsImxpbWl0ZWRBY2Nlc3NTdGF0dXMiLCJlcnIiLCJfSU5GT18iLCJ1c2VKd3QiLCJ1c2VCYXNpY0F1dGgiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJzdHJpbmdpZnkiLCJnZW5lcmF0ZUp3dCIsImZyb20iLCJxcyIsImxlbmd0aCIsImpvaW5DaGFyIiwiaW5kZXhPZiIsImZpbGUiLCJmb3JtRGF0YSIsInZhbHVlIiwiZmlsZW5hbWUiLCJ1cmwiLCJwb3N0IiwiQXV0aG9yaXphdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLFFBQVFDLFFBQVEsT0FBUixDQUFaO0FBQ0EsSUFBSUMsT0FBT0QsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJRSxVQUFVRixRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQUlHLGNBQWNILFFBQVEsYUFBUixDQUFsQjs7SUFFTUksVTtBQUNKLHNCQUFZQyxPQUFaLEVBQXFCQyxXQUFyQixFQUFrQztBQUFBOztBQUNoQyxTQUFLQSxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtDLElBQUwsR0FBWUYsUUFBUUUsSUFBUixJQUFnQixnQkFBNUI7QUFDQSxTQUFLQyxJQUFMLEdBQVlILFFBQVFHLElBQVIsSUFBZ0IsR0FBNUI7QUFDQSxTQUFLVCxLQUFMLEdBQWFNLFFBQVFOLEtBQVIsSUFBaUJBLEtBQTlCO0FBQ0EsU0FBS0UsSUFBTCxHQUFZSSxRQUFRSixJQUFSLElBQWdCQSxJQUE1QjtBQUNBLFNBQUtRLE9BQUwsR0FBZTtBQUNiLHNCQUFnQixtQ0FESDtBQUViQyxjQUFRO0FBRkssS0FBZjtBQUlBLFNBQUtDLE1BQUwsR0FBY04sUUFBUU0sTUFBdEI7QUFDQSxTQUFLQyxPQUFMLEdBQWVQLFFBQVFPLE9BQXZCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQlgsT0FBbEI7O0FBRUEsUUFBSUcsUUFBUVMsU0FBWixFQUF1QjtBQUNyQixXQUFLTCxPQUFMLENBQWEsWUFBYixJQUE2QkosUUFBUVMsU0FBckM7QUFDRDtBQUNGOzs7OzRCQUVPQyxRLEVBQVVDLE0sRUFBUUMsUSxFQUFtQztBQUFBOztBQUFBLFVBQXpCQyxlQUF5Qix1RUFBUCxLQUFPOztBQUMzRCxVQUFJLE9BQU9GLE1BQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDaENDLG1CQUFXRCxNQUFYO0FBQ0FELGlC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RixPQURGLEVBTUUsTUFORixFQU9FUSxRQVBGO0FBU0Q7Ozt1Q0FFa0JFLEksRUFBTVcsTSxFQUFRYixRLEVBQVV3RCxNLEVBQVE7QUFDakQzQyxlQUFTQSxVQUFVLEVBQW5CO0FBQ0EsVUFBSSxDQUFDMkMsTUFBTCxFQUFhO0FBQ1gzQyxlQUFPLFNBQVAsSUFBb0IsS0FBS3hCLFdBQUwsQ0FBaUJxRSxNQUFyQztBQUNBN0MsZUFBTyxZQUFQLElBQXVCLEtBQUt4QixXQUFMLENBQWlCc0UsU0FBeEM7QUFDRDs7QUFFRHpELGFBQU9BLE9BQU8sR0FBUCxHQUFhaEIsWUFBWTBFLFNBQVosQ0FBc0IvQyxNQUF0QixDQUFwQjs7QUFFQSxXQUFLNUIsT0FBTCxDQUNFO0FBQ0VpQixjQUFNQTtBQURSLE9BREYsRUFJRSxNQUpGLEVBS0VGLFFBTEY7QUFPRDs7Ozs7O2tCQUdZYixVIiwiZmlsZSI6Ikh0dHBDbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG52YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKFwicmVxdWVzdFwiKTtcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTtcblxuY2xhc3MgSHR0cENsaWVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGNyZWRlbnRpYWxzKSB7XG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgIHRoaXMuaG9zdCA9IG9wdGlvbnMuaG9zdCB8fCBcInJlc3QubmV4bW8uY29tXCI7XG4gICAgdGhpcy5wb3J0ID0gb3B0aW9ucy5wb3J0IHx8IDQ0MztcbiAgICB0aGlzLmh0dHBzID0gb3B0aW9ucy5odHRwcyB8fCBodHRwcztcbiAgICB0aGlzLmh0dHAgPSBvcHRpb25zLmh0dHAgfHwgaHR0cDtcbiAgICB0aGlzLmhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgdGhpcy5sb2dnZXIgPSBvcHRpb25zLmxvZ2dlcjtcbiAgICB0aGlzLnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gICAgdGhpcy5yZXF1ZXN0TGliID0gcmVxdWVzdDtcblxuICAgIGlmIChvcHRpb25zLnVzZXJBZ2VudCkge1xuICAgICAgdGhpcy5oZWFkZXJzW1wiVXNlci1BZ2VudFwiXSA9IG9wdGlvbnMudXNlckFnZW50O1xuICAgIH1cbiAgfVxuXG4gIHJlcXVlc3QoZW5kcG9pbnQsIG1ldGhvZCwgY2FsbGJhY2ssIHNraXBKc29uUGFyc2luZyA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FsbGJhY2sgPSBtZXRob2Q7XG4gICAgICBlbmRwb2ludC5tZXRob2QgPSBlbmRwb2ludC5tZXRob2QgfHwgXCJHRVRcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGVuZHBvaW50Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICB9XG5cbiAgICBpZiAoZW5kcG9pbnQubWV0aG9kID09PSBcIlBPU1RcIiB8fCBlbmRwb2ludC5tZXRob2QgPT09IFwiREVMRVRFXCIpIHtcbiAgICAgIC8vIFRPRE86IHZlcmlmeSB0aGUgZm9sbG93aW5nIGZpeCBpcyByZXF1aXJlZFxuICAgICAgLy8gRml4IGJyb2tlbiBkdWUgb3QgNDExIENvbnRlbnQtTGVuZ3RoIGVycm9yIG5vdyBzZW50IGJ5IE5leG1vIEFQSVxuICAgICAgLy8gUEwgMjAxNi1TZXB0LTYgLSBjb21tZW50ZWQgb3V0IENvbnRlbnQtTGVuZ3RoIDBcbiAgICAgIC8vIGhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSAwO1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3Q6IGVuZHBvaW50Lmhvc3QgPyBlbmRwb2ludC5ob3N0IDogdGhpcy5ob3N0LFxuICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgcGF0aDogZW5kcG9pbnQucGF0aCxcbiAgICAgIG1ldGhvZDogZW5kcG9pbnQubWV0aG9kLFxuICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKVxuICAgIH07XG5cbiAgICBpZiAodGhpcy50aW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICB9XG5cbiAgICAvLyBBbGxvdyBleGlzdGluZyBoZWFkZXJzIHRvIGJlIG92ZXJyaWRkZW5cbiAgICAvLyBBbGxvdyBuZXcgaGVhZGVycyB0byBiZSBhZGRlZFxuICAgIGlmIChlbmRwb2ludC5oZWFkZXJzKSB7XG4gICAgICBPYmplY3Qua2V5cyhlbmRwb2ludC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnNba2V5XSA9IGVuZHBvaW50LmhlYWRlcnNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzLnNpZ25hdHVyZVNlY3JldCAmJiB0aGlzLmNyZWRlbnRpYWxzLnNpZ25hdHVyZU1ldGhvZCkge1xuICAgICAgY29uc3Qgc3BsaXRQYXRoID0gb3B0aW9ucy5wYXRoLnNwbGl0KC9cXD8oLispLyk7XG4gICAgICBjb25zdCBwYXRoID0gc3BsaXRQYXRoWzBdO1xuXG4gICAgICB2YXIgcGFyYW1zID0gcXVlcnlzdHJpbmcuZGVjb2RlKHNwbGl0UGF0aFsxXSk7XG5cbiAgICAgIC8vIGFkZCB0aW1lc3RhbXAgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICAgICAgaWYgKCFwYXJhbXMudGltZXN0YW1wKSB7XG4gICAgICAgIHBhcmFtcy50aW1lc3RhbXAgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSB8IDA7IC8vIGZsb29yIHRvIHNlY29uZHNcbiAgICAgICAgcGFyYW1zLnRpbWVzdGFtcCA9IHBhcmFtcy50aW1lc3RhbXAudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgLy8gc3RyaXAgQVBJIFNlY3JldFxuICAgICAgZGVsZXRlIHBhcmFtcy5hcGlfc2VjcmV0O1xuXG4gICAgICBjb25zdCBoYXNoID0gdGhpcy5jcmVkZW50aWFscy5nZW5lcmF0ZVNpZ25hdHVyZShwYXJhbXMpO1xuXG4gICAgICB2YXIgcXVlcnkgPSBcIlwiO1xuXG4gICAgICAvLyByZWJ1aWxkIHF1ZXJ5XG4gICAgICBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICBxdWVyeSArPSBcIiZcIiArIGtleSArIFwiPVwiICsgcGFyYW1zW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyByZXBsYWNlIHRoZSBmaXJzdCAmIHdpdGggP1xuICAgICAgcXVlcnkgPSBxdWVyeS5yZXBsYWNlKC8mL2ksIFwiP1wiKTtcblxuICAgICAgb3B0aW9ucy5wYXRoID0gYCR7cGF0aH0ke3F1ZXJ5fSZzaWc9JHtoYXNofWA7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlJlcXVlc3Q6XCIsIG9wdGlvbnMsIFwiXFxuQm9keTpcIiwgZW5kcG9pbnQuYm9keSk7XG4gICAgdmFyIHJlcXVlc3Q7XG5cbiAgICBpZiAob3B0aW9ucy5wb3J0ID09PSA0NDMpIHtcbiAgICAgIHJlcXVlc3QgPSB0aGlzLmh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QgPSB0aGlzLmh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0LmVuZChlbmRwb2ludC5ib2R5KTtcblxuICAgIC8vIEtlZXAgYW4gYXJyYXkgb2YgU3RyaW5nIG9yIEJ1ZmZlcnMsXG4gICAgLy8gZGVwZW5kaW5nIG9uIGNvbnRlbnQgdHlwZSAoYmluYXJ5IG9yIEpTT04pIG9mIHJlc3BvbnNlXG4gICAgdmFyIHJlc3BvbnNlRGF0YSA9IFtdO1xuXG4gICAgcmVxdWVzdC5vbihcInJlc3BvbnNlXCIsIHJlc3BvbnNlID0+IHtcbiAgICAgIHZhciBpc0JpbmFyeSA9XG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPT09IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI7XG4gICAgICBpZiAoIWlzQmluYXJ5KSB7XG4gICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKFwidXRmOFwiKTtcbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2Uub24oXCJkYXRhXCIsIGNodW5rID0+IHtcbiAgICAgICAgcmVzcG9uc2VEYXRhLnB1c2goY2h1bmspO1xuICAgICAgfSk7XG5cbiAgICAgIHJlc3BvbnNlLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcInJlc3BvbnNlIGVuZGVkOlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGlzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEgPSBCdWZmZXIuY29uY2F0KHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX3BhcnNlUmVzcG9uc2UoXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YSxcbiAgICAgICAgICAgIGVuZHBvaW50Lm1ldGhvZCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgc2tpcEpzb25QYXJzaW5nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXNwb25zZS5vbihcImNsb3NlXCIsIGUgPT4ge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgXCJwcm9ibGVtIHdpdGggQVBJIHJlcXVlc3QgZGV0YWlsZWQgc3RhY2t0cmFjZSBiZWxvdyBcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICAgICAgY2FsbGJhY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlcXVlc3Qub24oXCJlcnJvclwiLCBlID0+IHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwicHJvYmxlbSB3aXRoIEFQSSByZXF1ZXN0IGRldGFpbGVkIHN0YWNrdHJhY2UgYmVsb3cgXCIpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICBjYWxsYmFjayhlKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9fcGFyc2VSZXNwb25zZShodHRwUmVzcG9uc2UsIGRhdGEsIG1ldGhvZCwgY2FsbGJhY2ssIHNraXBKc29uUGFyc2luZykge1xuICAgIGNvbnN0IGlzQXJyYXlPckJ1ZmZlciA9IGRhdGEgaW5zdGFuY2VvZiBBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgQnVmZmVyO1xuICAgIGlmICghaXNBcnJheU9yQnVmZmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHNob3VsZCBiZSBvZiB0eXBlIEFycmF5IG9yIEJ1ZmZlclwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0dXMgPSBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICBjb25zdCBoZWFkZXJzID0gaHR0cFJlc3BvbnNlLmhlYWRlcnM7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgbWVzc2FnZTogXCJTZXJ2ZXIgRXJyb3JcIixcbiAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXNcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGh0dHBSZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdID09PSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG4gICAgICApIHtcbiAgICAgICAgcmVzcG9uc2UgPSBkYXRhO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQyOSkge1xuICAgICAgICAvLyA0MjkgZG9lcyBub3QgcmV0dXJuIGEgcGFyc2FibGUgYm9keVxuICAgICAgICBpZiAoIWhlYWRlcnNbXCJyZXRyeS1hZnRlclwiXSkge1xuICAgICAgICAgIC8vIHJldHJ5IGJhc2VkIG9uIGFsbG93ZWQgcGVyIHNlY29uZFxuICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJNaWxsaXMgPSBtZXRob2QgPT09IFwiUE9TVFwiID8gMTAwMCAvIDIgOiAxMDAwIC8gNTtcbiAgICAgICAgICBoZWFkZXJzW1wicmV0cnktYWZ0ZXJcIl0gPSByZXRyeUFmdGVyTWlsbGlzO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yID0ge1xuICAgICAgICAgIGJvZHk6IGRhdGEuam9pbihcIlwiKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDIwNCkge1xuICAgICAgICByZXNwb25zZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA+PSA0MDAgfHwgc3RhdHVzIDwgMjAwKSB7XG4gICAgICAgIGVycm9yID0ge1xuICAgICAgICAgIGJvZHk6IEpTT04ucGFyc2UoZGF0YS5qb2luKFwiXCIpKSxcbiAgICAgICAgICBoZWFkZXJzXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCAhPT0gXCJERUxFVEVcIikge1xuICAgICAgICBpZiAoISFza2lwSnNvblBhcnNpbmcpIHtcbiAgICAgICAgICByZXNwb25zZSA9IGRhdGEuam9pbihcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoZGF0YS5qb2luKFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcG9uc2UgPSBkYXRhO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKHBhcnNlRXJyb3IpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiY291bGQgbm90IGNvbnZlcnQgQVBJIHJlc3BvbnNlIHRvIEpTT04sIGFib3ZlIGVycm9yIGlzIGlnbm9yZWQgYW5kIHJhdyBBUEkgcmVzcG9uc2UgaXMgcmV0dXJuZWQgdG8gY2xpZW50XCJcbiAgICAgICk7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIlJhdyBFcnJvciBtZXNzYWdlIGZyb20gQVBJIFwiKTtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBcIiR7ZGF0YX1cImApO1xuXG4gICAgICBlcnJvciA9IHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgIG1lc3NhZ2U6IFwiVGhlIEFQSSByZXNwb25zZSBjb3VsZCBub3QgYmUgcGFyc2VkLlwiLFxuICAgICAgICBib2R5OiBkYXRhLmpvaW4oXCJcIiksXG4gICAgICAgIHBhcnNlRXJyb3I6IHBhcnNlRXJyb3JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBlcnJvci5zdGF0dXNDb2RlID0gc3RhdHVzO1xuICAgICAgZXJyb3IuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRMaW1pdGVkQWNjZXNzTWVzc2FnZVRvRXJyb3JzKGNhbGxiYWNrLCBsaW1pdGVkQWNjZXNzU3RhdHVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgaWYgKGVyciAmJiBlcnIuc3RhdHVzID09IGxpbWl0ZWRBY2Nlc3NTdGF0dXMpIHtcbiAgICAgICAgZXJyLl9JTkZPXyA9XG4gICAgICAgICAgXCJUaGlzIGVuZHBvaW50IG1heSBuZWVkIGFjdGl2YXRpbmcgb24geW91ciBhY2NvdW50LiBQbGVhc2UgZW1haWwgc3VwcG9ydEBuZXhtby5jb20gZm9yIG1vcmUgaW5mb3JtYXRpb25cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgZGF0YSk7XG4gICAgfTtcbiAgfVxuXG4gIGdldChwYXRoLCBwYXJhbXMsIGNhbGxiYWNrLCB1c2VKd3QgPSBmYWxzZSwgdXNlQmFzaWNBdXRoID0gZmFsc2UpIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICBpZiAoIXVzZUp3dCAmJiAhdXNlQmFzaWNBdXRoKSB7XG4gICAgICBwYXJhbXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBwYXJhbXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgcGF0aCA9IHBhdGggKyBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICBpZiAodXNlSnd0KSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCZWFyZXIgJHt0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlSnd0KCl9YDtcbiAgICB9XG4gICAgaWYgKHVzZUJhc2ljQXV0aCkge1xuICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtCdWZmZXIuZnJvbShcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscy5hcGlLZXkgKyBcIjpcIiArIHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0XG4gICAgICApLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBoZWFkZXJzXG4gICAgICB9LFxuICAgICAgXCJHRVRcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZShwYXRoLCBjYWxsYmFjaywgdXNlSnd0LCB1c2VCYXNpY0F1dGgpIHtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIGxldCBoZWFkZXJzID0ge307XG5cbiAgICBpZiAodXNlQmFzaWNBdXRoKSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKFxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleSArIFwiOlwiICsgdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXRcbiAgICAgICkudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgICB9XG4gICAgcGF0aCA9IHBhdGggKyBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBoZWFkZXJzXG4gICAgICB9LFxuICAgICAgXCJERUxFVEVcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHBvc3RGaWxlKHBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrLCB1c2VKd3QpIHtcbiAgICBsZXQgcXMgPSB7fTtcbiAgICBpZiAoIXVzZUp3dCkge1xuICAgICAgcXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBxc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMocXMpLmxlbmd0aCkge1xuICAgICAgbGV0IGpvaW5DaGFyID0gXCI/XCI7XG4gICAgICBpZiAocGF0aC5pbmRleE9mKGpvaW5DaGFyKSAhPT0gLTEpIHtcbiAgICAgICAgam9pbkNoYXIgPSBcIiZcIjtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBwYXRoICsgam9pbkNoYXIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocXMpO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGUgPSBvcHRpb25zLmZpbGU7XG4gICAgZGVsZXRlIG9wdGlvbnMuZmlsZTsgLy8gV2UgZG9uJ3Qgc2VuZCB0aGlzIGFzIG1ldGFkYXRhXG5cbiAgICBjb25zdCBmb3JtRGF0YSA9IHt9O1xuXG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIGZvcm1EYXRhW1wiZmlsZWRhdGFcIl0gPSB7XG4gICAgICAgIHZhbHVlOiBmaWxlLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgZmlsZW5hbWU6IG9wdGlvbnMuZmlsZW5hbWUgfHwgbnVsbFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZm8pIHtcbiAgICAgIGZvcm1EYXRhLmluZm8gPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmluZm8pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVybCkge1xuICAgICAgZm9ybURhdGEudXJsID0gb3B0aW9ucy51cmw7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0TGliLnBvc3QoXG4gICAgICB7XG4gICAgICAgIHVybDogXCJodHRwczovL1wiICsgdGhpcy5ob3N0ICsgcGF0aCxcbiAgICAgICAgZm9ybURhdGE6IGZvcm1EYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZGVudGlhbHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwb3N0KHBhdGgsIHBhcmFtcywgY2FsbGJhY2ssIHVzZUp3dCkge1xuICAgIGxldCBxcyA9IHt9O1xuICAgIGlmICghdXNlSnd0KSB7XG4gICAgICBxc1tcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleTtcbiAgICAgIHFzW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIGxldCBqb2luQ2hhciA9IFwiP1wiO1xuICAgIGlmIChwYXRoLmluZGV4T2Yoam9pbkNoYXIpICE9PSAtMSkge1xuICAgICAgam9pbkNoYXIgPSBcIiZcIjtcbiAgICB9XG5cbiAgICBwYXRoID0gcGF0aCArIGpvaW5DaGFyICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHFzKTtcblxuICAgIHRoaXMucmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgYm9keTogcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHBhcmFtcylcbiAgICAgIH0sXG4gICAgICBcIlBPU1RcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHBvc3RKc29uKHBhdGgsIHBhcmFtcywgY2FsbGJhY2ssIHVzZUp3dCwgdXNlQmFzaWNBdXRoKSB7XG4gICAgbGV0IHFzID0ge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBxc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBsZXQgam9pbkNoYXIgPSBcIj9cIjtcbiAgICBpZiAocGF0aC5pbmRleE9mKGpvaW5DaGFyKSAhPT0gLTEpIHtcbiAgICAgIGpvaW5DaGFyID0gXCImXCI7XG4gICAgfVxuXG4gICAgcGF0aCA9IHBhdGggKyBqb2luQ2hhciArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShxcyk7XG5cbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICBpZiAodXNlQmFzaWNBdXRoKSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKFxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleSArIFwiOlwiICsgdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXRcbiAgICAgICkudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgICB9XG5cbiAgICB0aGlzLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgICAgIGhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBcIlBPU1RcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHBvc3RVc2VRdWVyeVN0cmluZyhwYXRoLCBwYXJhbXMsIGNhbGxiYWNrLCB1c2VKd3QpIHtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgaWYgKCF1c2VKd3QpIHtcbiAgICAgIHBhcmFtc1tcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleTtcbiAgICAgIHBhcmFtc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBwYXRoID0gcGF0aCArIFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHBhcmFtcyk7XG5cbiAgICB0aGlzLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIHBhdGg6IHBhdGhcbiAgICAgIH0sXG4gICAgICBcIlBPU1RcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIdHRwQ2xpZW50O1xuIl19