"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `events` resource.
 */
var Events = function () {
  _createClass(Events, null, [{
    key: "PATH",

    /**
     * The path to the `events` resource.
     */
    get: function get() {
      return "/beta/conversations/{conversation_uuid}/events";
    }

    /**
     * Creates a new Events class.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function Events(creds, options) {
    _classCallCheck(this, Events);

    this.creds = creds;
    this.options = options;

    this._nexmo = this.options.nexmoOverride || _index2.default;
  }

  /**
   * Adds a member to a conversation.
   *
   * @param {string} [conversationId] - The unique identifier for the conversation
   * @param {Object} params - Parameters used when adding a member to the conversation. See https://ea.developer.nexmo.com/api/conversation#add-a-user-to-a-conversation for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(Events, [{
    key: "add",
    value: function add(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: "api.nexmo.com",
        path: Events.PATH.replace("{conversation_uuid}", conversationId),
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing member.
     *
     * @param {string} [conversationId] - The unique identifier for the conversation
     * @param {string|object} query - The unique identifier for the member to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-events-of-a-conversation
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(conversationId, query, callback) {
      this._nexmo.getWithQuery(Events.PATH.replace("{conversation_uuid}", conversationId), query, this.creds, this.options, callback);
    }
  }]);

  return Events;
}();

exports.default = Events;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudHMuanMiXSwibmFtZXMiOlsiRXZlbnRzIiwiY3JlZHMiLCJvcHRpb25zIiwiX25leG1vIiwibmV4bW9PdmVycmlkZSIsImNvbnZlcnNhdGlvbklkIiwicGFyYW1zIiwiY2FsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwiaG9zdCIsInBhdGgiLCJQQVRIIiwicmVwbGFjZSIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImdlbmVyYXRlSnd0IiwiaHR0cENsaWVudCIsInJlcXVlc3QiLCJxdWVyeSIsImdldFdpdGhRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFFQTs7O0lBR01BLE07Ozs7QUFDSjs7O3dCQUdrQjtBQUNoQixhQUFPLGdEQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OztBQU1BLGtCQUFZQyxLQUFaLEVBQW1CQyxPQUFuQixFQUE0QjtBQUFBOztBQUMxQixTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7O0FBRUEsU0FBS0MsTUFBTCxHQUFjLEtBQUtELE9BQUwsQ0FBYUUsYUFBYixtQkFBZDtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozt3QkFPSUMsYyxFQUFnQkMsTSxFQUFRQyxRLEVBQVU7QUFDcENELGVBQVNFLEtBQUtDLFNBQUwsQ0FBZUgsTUFBZixDQUFUOztBQUVBLFVBQUlJLFNBQVM7QUFDWEMsY0FBTSxlQURLO0FBRVhDLGNBQU1aLE9BQU9hLElBQVAsQ0FBWUMsT0FBWixDQUFvQixxQkFBcEIsRUFBMkNULGNBQTNDLENBRks7QUFHWFUsZ0JBQVEsTUFIRztBQUlYQyxjQUFNVixNQUpLO0FBS1hXLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVBDLHFDQUF5QixLQUFLakIsS0FBTCxDQUFXa0IsV0FBWDtBQUZsQjtBQUxFLE9BQWI7QUFVQSxXQUFLakIsT0FBTCxDQUFha0IsVUFBYixDQUF3QkMsT0FBeEIsQ0FBZ0NYLE1BQWhDLEVBQXdDSCxRQUF4QztBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7d0JBU0lGLGMsRUFBZ0JpQixLLEVBQU9mLFEsRUFBVTtBQUNuQyxXQUFLSixNQUFMLENBQVlvQixZQUFaLENBQ0V2QixPQUFPYSxJQUFQLENBQVlDLE9BQVosQ0FBb0IscUJBQXBCLEVBQTJDVCxjQUEzQyxDQURGLEVBRUVpQixLQUZGLEVBR0UsS0FBS3JCLEtBSFAsRUFJRSxLQUFLQyxPQUpQLEVBS0VLLFFBTEY7QUFPRDs7Ozs7O2tCQUdZUCxNIiwiZmlsZSI6IkV2ZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZXhtbyBmcm9tIFwiLi9pbmRleFwiO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYGV2ZW50c2AgcmVzb3VyY2UuXG4gKi9cbmNsYXNzIEV2ZW50cyB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgYGV2ZW50c2AgcmVzb3VyY2UuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFBBVEgoKSB7XG4gICAgcmV0dXJuIFwiL2JldGEvY29udmVyc2F0aW9ucy97Y29udmVyc2F0aW9uX3V1aWR9L2V2ZW50c1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBOZXhtbyBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5fbmV4bW8gPSB0aGlzLm9wdGlvbnMubmV4bW9PdmVycmlkZSB8fCBuZXhtbztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbWVtYmVyIHRvIGEgY29udmVyc2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbnZlcnNhdGlvbklkXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnZlcnNhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gYWRkaW5nIGEgbWVtYmVyIHRvIHRoZSBjb252ZXJzYXRpb24uIFNlZSBodHRwczovL2VhLmRldmVsb3Blci5uZXhtby5jb20vYXBpL2NvbnZlcnNhdGlvbiNhZGQtYS11c2VyLXRvLWEtY29udmVyc2F0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIGFkZChjb252ZXJzYXRpb25JZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDogXCJhcGkubmV4bW8uY29tXCIsXG4gICAgICBwYXRoOiBFdmVudHMuUEFUSC5yZXBsYWNlKFwie2NvbnZlcnNhdGlvbl91dWlkfVwiLCBjb252ZXJzYXRpb25JZCksXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBleGlzdGluZyBtZW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY29udmVyc2F0aW9uSWRdIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udmVyc2F0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcXVlcnkgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBtZW1iZXIgdG8gcmV0cmlldmVcbiAgICogICAgICAgICAgICAgICBvciBhIHNldCBvZiBmaWx0ZXIgcGFyYW1ldGVycyBmb3IgdGhlIHF1ZXJ5LiBGb3IgbW9yZSBpbmZvcm1hdGlvblxuICAgKiAgICAgICAgICAgICAgIHNlZSBodHRwczovL2VhLmRldmVsb3Blci5uZXhtby5jb20vYXBpL2NvbnZlcnNhdGlvbiNyZXRyaWV2ZS1ldmVudHMtb2YtYS1jb252ZXJzYXRpb25cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBnZXQoY29udmVyc2F0aW9uSWQsIHF1ZXJ5LCBjYWxsYmFjaykge1xuICAgIHRoaXMuX25leG1vLmdldFdpdGhRdWVyeShcbiAgICAgIEV2ZW50cy5QQVRILnJlcGxhY2UoXCJ7Y29udmVyc2F0aW9uX3V1aWR9XCIsIGNvbnZlcnNhdGlvbklkKSxcbiAgICAgIHF1ZXJ5LFxuICAgICAgdGhpcy5jcmVkcyxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iXX0=