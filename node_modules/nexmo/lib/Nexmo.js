"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _Credentials = require("./Credentials");

var _Credentials2 = _interopRequireDefault(_Credentials);

var _JwtGenerator = require("./JwtGenerator");

var _JwtGenerator2 = _interopRequireDefault(_JwtGenerator);

var _HashGenerator = require("./HashGenerator");

var _HashGenerator2 = _interopRequireDefault(_HashGenerator);

var _Message = require("./Message");

var _Message2 = _interopRequireDefault(_Message);

var _Voice = require("./Voice");

var _Voice2 = _interopRequireDefault(_Voice);

var _Number = require("./Number");

var _Number2 = _interopRequireDefault(_Number);

var _Verify = require("./Verify");

var _Verify2 = _interopRequireDefault(_Verify);

var _NumberInsight = require("./NumberInsight");

var _NumberInsight2 = _interopRequireDefault(_NumberInsight);

var _App = require("./App");

var _App2 = _interopRequireDefault(_App);

var _Account = require("./Account");

var _Account2 = _interopRequireDefault(_Account);

var _CallsResource = require("./CallsResource");

var _CallsResource2 = _interopRequireDefault(_CallsResource);

var _FilesResource = require("./FilesResource");

var _FilesResource2 = _interopRequireDefault(_FilesResource);

var _Conversion = require("./Conversion");

var _Conversion2 = _interopRequireDefault(_Conversion);

var _Media = require("./Media");

var _Media2 = _interopRequireDefault(_Media);

var _Redact = require("./Redact");

var _Redact2 = _interopRequireDefault(_Redact);

var _HttpClient = require("./HttpClient");

var _HttpClient2 = _interopRequireDefault(_HttpClient);

var _NullLogger = require("./NullLogger");

var _NullLogger2 = _interopRequireDefault(_NullLogger);

var _ConsoleLogger = require("./ConsoleLogger");

var _ConsoleLogger2 = _interopRequireDefault(_ConsoleLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var jwtGeneratorInstance = new _JwtGenerator2.default();
var hashGeneratorInstance = new _HashGenerator2.default();

var Nexmo = function () {
  /**
   * @param {Credentials} credentials - Nexmo API credentials
   * @param {string} credentials.apiKey - the Nexmo API key
   * @param {string} credentials.apiSecret - the Nexmo API secret
   * @param {Object} options - Additional options
   * @param {boolean} options.debug - `true` to turn on debug logging
   * @param {Object} options.logger - Set a custom logger.
   * @param {string} options.appendToUserAgent - A value to append to the user agent.
   *                    The value will be prefixed with a `/`
   */
  function Nexmo(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { debug: false };

    _classCallCheck(this, Nexmo);

    this.credentials = _Credentials2.default.parse(credentials);
    this.options = options;

    // If no logger has been supplied but debug has been set
    // default to using the ConsoleLogger
    if (!this.options.logger && this.options.debug) {
      this.options.logger = new _ConsoleLogger2.default();
    } else if (!this.options.logger) {
      // Swallow the logging
      this.options.logger = new _NullLogger2.default();
    }

    var userAgent = "nexmo-node/UNKNOWN node/UNKNOWN";
    try {
      var packageDetails = require(_path2.default.join(__dirname, "..", "package.json"));
      userAgent = "nexmo-node/" + packageDetails.version + " node/" + process.version.replace("v", "");
    } catch (e) {
      console.warn("Could not load package details");
    }
    this.options.userAgent = userAgent;
    if (this.options.appendToUserAgent) {
      this.options.userAgent += " " + this.options.appendToUserAgent;
    }

    // This is legacy, everything should use rest or api going forward
    this.options.httpClient = new _HttpClient2.default(Object.assign({ host: "rest.nexmo.com" }, this.options), this.credentials);

    // We have two different hosts, so we use two different HttpClients
    this.options.api = new _HttpClient2.default(Object.assign({ host: "api.nexmo.com" }, this.options), this.credentials);
    this.options.rest = new _HttpClient2.default(Object.assign({ host: "rest.nexmo.com" }, this.options), this.credentials);

    this.message = new _Message2.default(this.credentials, this.options);
    this.voice = new _Voice2.default(this.credentials, this.options);
    this.number = new _Number2.default(this.credentials, this.options);
    this.verify = new _Verify2.default(this.credentials, this.options);
    this.numberInsight = new _NumberInsight2.default(this.credentials, this.options);
    this.applications = new _App2.default(this.credentials, this.options);
    this.account = new _Account2.default(this.credentials, this.options);
    this.calls = new _CallsResource2.default(this.credentials, this.options);
    this.files = new _FilesResource2.default(this.credentials, this.options);
    this.conversion = new _Conversion2.default(this.credentials, this.options);
    this.media = new _Media2.default(this.credentials, this.options);
    this.redact = new _Redact2.default(this.credentials, this.options);

    /**
     * @deprecated Please use nexmo.applications
     */
    this.app = this.applications;
  }

  /**
   * Generate a JSON Web Token (JWT).
   *
   * The private key used upon Nexmo instance construction will be used to sign
   * the JWT. The application_id you used upon Nexmo instance creation will be
   * included in the claims for the JWT, however this can be overridden by passing
   * an application_id as part of the claims.
   *
   * @param {Object} claims - name/value pair claims to sign within the JWT
   *
   * @returns {String} the generated token
   */

  _createClass(Nexmo, [{
    key: "generateJwt",
    value: function generateJwt() {
      var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (claims.application_id === undefined) {
        claims.application_id = this.credentials.applicationId;
      }
      return Nexmo.generateJwt(this.credentials.privateKey, claims);
    }

    /**
     * Generate a Signature Hash.
     *
     * @param {Object} params - params to generate hash from
     *
     * @returns {String} the generated token
     */

  }, {
    key: "generateSignature",
    value: function generateSignature(params) {
      return this.credentials.generateSignature(params);
    }
  }]);

  return Nexmo;
}();

/**
 * Generate a JSON Web Token (JWT).
 *
 * @param {String|Buffer} privateKey - the path to the private key certificate
 *          to be used when signing the claims.
 * @param {Object} claims - name/value pair claims to sign within the JWT
 *
 * @returns {String} the generated token
 */


Nexmo.generateJwt = function (privateKey, claims) {
  if (!(privateKey instanceof Buffer)) {
    if (!_fs2.default.existsSync(privateKey)) {
      throw new Error("File \"" + privateKey + "\" not found.");
    } else {
      privateKey = _fs2.default.readFileSync(privateKey);
    }
  }
  return jwtGeneratorInstance.generate(privateKey, claims);
};

/**
 * Generate a Signature Hash.
 *
 * @param {String} method - the method to be used when creating the hash
 * @param {String} secret - the secret to be used when creating the hash
 * @param {Object} params - params to generate hash from
 *
 * @returns {String} the generated token
 */
Nexmo.generateSignature = function (method, secret, params) {
  return hashGeneratorInstance.generate(method, secret, params);
};

exports.default = Nexmo;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OZXhtby5qcyJdLCJuYW1lcyI6WyJqd3RHZW5lcmF0b3JJbnN0YW5jZSIsImhhc2hHZW5lcmF0b3JJbnN0YW5jZSIsIk5leG1vIiwiY3JlZGVudGlhbHMiLCJvcHRpb25zIiwiZGVidWciLCJwYXJzZSIsImxvZ2dlciIsInVzZXJBZ2VudCIsInBhY2thZ2VEZXRhaWxzIiwicmVxdWlyZSIsImpvaW4iLCJfX2Rpcm5hbWUiLCJ2ZXJzaW9uIiwicHJvY2VzcyIsInJlcGxhY2UiLCJlIiwiY29uc29sZSIsIndhcm4iLCJhcHBlbmRUb1VzZXJBZ2VudCIsImh0dHBDbGllbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJob3N0IiwiYXBpIiwicmVzdCIsIm1lc3NhZ2UiLCJ2b2ljZSIsIm51bWJlciIsInZlcmlmeSIsIm51bWJlckluc2lnaHQiLCJhcHBsaWNhdGlvbnMiLCJhY2NvdW50IiwiY2FsbHMiLCJmaWxlcyIsImNvbnZlcnNpb24iLCJtZWRpYSIsInJlZGFjdCIsImFwcCIsImNsYWltcyIsImFwcGxpY2F0aW9uX2lkIiwidW5kZWZpbmVkIiwiYXBwbGljYXRpb25JZCIsImdlbmVyYXRlSnd0IiwicHJpdmF0ZUtleSIsInBhcmFtcyIsImdlbmVyYXRlU2lnbmF0dXJlIiwiQnVmZmVyIiwiZXhpc3RzU3luYyIsIkVycm9yIiwicmVhZEZpbGVTeW5jIiwiZ2VuZXJhdGUiLCJtZXRob2QiLCJzZWNyZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQSx1QkFBdUIsNEJBQTdCO0FBQ0EsSUFBTUMsd0JBQXdCLDZCQUE5Qjs7SUFFTUMsSztBQUNKOzs7Ozs7Ozs7O0FBVUEsaUJBQVlDLFdBQVosRUFBcUQ7QUFBQSxRQUE1QkMsT0FBNEIsdUVBQWxCLEVBQUVDLE9BQU8sS0FBVCxFQUFrQjs7QUFBQTs7QUFDbkQsU0FBS0YsV0FBTCxHQUFtQixzQkFBWUcsS0FBWixDQUFrQkgsV0FBbEIsQ0FBbkI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7O0FBRUE7QUFDQTtBQUNBLFFBQUksQ0FBQyxLQUFLQSxPQUFMLENBQWFHLE1BQWQsSUFBd0IsS0FBS0gsT0FBTCxDQUFhQyxLQUF6QyxFQUFnRDtBQUM5QyxXQUFLRCxPQUFMLENBQWFHLE1BQWIsR0FBc0IsNkJBQXRCO0FBQ0QsS0FGRCxNQUVPLElBQUksQ0FBQyxLQUFLSCxPQUFMLENBQWFHLE1BQWxCLEVBQTBCO0FBQy9CO0FBQ0EsV0FBS0gsT0FBTCxDQUFhRyxNQUFiLEdBQXNCLDBCQUF0QjtBQUNEOztBQUVELFFBQUlDLFlBQVksaUNBQWhCO0FBQ0EsUUFBSTtBQUNGLFVBQUlDLGlCQUFpQkMsUUFBUSxlQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsY0FBM0IsQ0FBUixDQUFyQjtBQUNBSixrQ0FDRUMsZUFBZUksT0FEakIsY0FFU0MsUUFBUUQsT0FBUixDQUFnQkUsT0FBaEIsQ0FBd0IsR0FBeEIsRUFBNkIsRUFBN0IsQ0FGVDtBQUdELEtBTEQsQ0FLRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkMsY0FBUUMsSUFBUixDQUFhLGdDQUFiO0FBQ0Q7QUFDRCxTQUFLZCxPQUFMLENBQWFJLFNBQWIsR0FBeUJBLFNBQXpCO0FBQ0EsUUFBSSxLQUFLSixPQUFMLENBQWFlLGlCQUFqQixFQUFvQztBQUNsQyxXQUFLZixPQUFMLENBQWFJLFNBQWIsVUFBOEIsS0FBS0osT0FBTCxDQUFhZSxpQkFBM0M7QUFDRDs7QUFFRDtBQUNBLFNBQUtmLE9BQUwsQ0FBYWdCLFVBQWIsR0FBMEIseUJBQ3hCQyxPQUFPQyxNQUFQLENBQWMsRUFBRUMsTUFBTSxnQkFBUixFQUFkLEVBQTBDLEtBQUtuQixPQUEvQyxDQUR3QixFQUV4QixLQUFLRCxXQUZtQixDQUExQjs7QUFLQTtBQUNBLFNBQUtDLE9BQUwsQ0FBYW9CLEdBQWIsR0FBbUIseUJBQ2pCSCxPQUFPQyxNQUFQLENBQWMsRUFBRUMsTUFBTSxlQUFSLEVBQWQsRUFBeUMsS0FBS25CLE9BQTlDLENBRGlCLEVBRWpCLEtBQUtELFdBRlksQ0FBbkI7QUFJQSxTQUFLQyxPQUFMLENBQWFxQixJQUFiLEdBQW9CLHlCQUNsQkosT0FBT0MsTUFBUCxDQUFjLEVBQUVDLE1BQU0sZ0JBQVIsRUFBZCxFQUEwQyxLQUFLbkIsT0FBL0MsQ0FEa0IsRUFFbEIsS0FBS0QsV0FGYSxDQUFwQjs7QUFLQSxTQUFLdUIsT0FBTCxHQUFlLHNCQUFZLEtBQUt2QixXQUFqQixFQUE4QixLQUFLQyxPQUFuQyxDQUFmO0FBQ0EsU0FBS3VCLEtBQUwsR0FBYSxvQkFBVSxLQUFLeEIsV0FBZixFQUE0QixLQUFLQyxPQUFqQyxDQUFiO0FBQ0EsU0FBS3dCLE1BQUwsR0FBYyxxQkFBVyxLQUFLekIsV0FBaEIsRUFBNkIsS0FBS0MsT0FBbEMsQ0FBZDtBQUNBLFNBQUt5QixNQUFMLEdBQWMscUJBQVcsS0FBSzFCLFdBQWhCLEVBQTZCLEtBQUtDLE9BQWxDLENBQWQ7QUFDQSxTQUFLMEIsYUFBTCxHQUFxQiw0QkFBa0IsS0FBSzNCLFdBQXZCLEVBQW9DLEtBQUtDLE9BQXpDLENBQXJCO0FBQ0EsU0FBSzJCLFlBQUwsR0FBb0Isa0JBQVEsS0FBSzVCLFdBQWIsRUFBMEIsS0FBS0MsT0FBL0IsQ0FBcEI7QUFDQSxTQUFLNEIsT0FBTCxHQUFlLHNCQUFZLEtBQUs3QixXQUFqQixFQUE4QixLQUFLQyxPQUFuQyxDQUFmO0FBQ0EsU0FBSzZCLEtBQUwsR0FBYSw0QkFBa0IsS0FBSzlCLFdBQXZCLEVBQW9DLEtBQUtDLE9BQXpDLENBQWI7QUFDQSxTQUFLOEIsS0FBTCxHQUFhLDRCQUFrQixLQUFLL0IsV0FBdkIsRUFBb0MsS0FBS0MsT0FBekMsQ0FBYjtBQUNBLFNBQUsrQixVQUFMLEdBQWtCLHlCQUFlLEtBQUtoQyxXQUFwQixFQUFpQyxLQUFLQyxPQUF0QyxDQUFsQjtBQUNBLFNBQUtnQyxLQUFMLEdBQWEsb0JBQVUsS0FBS2pDLFdBQWYsRUFBNEIsS0FBS0MsT0FBakMsQ0FBYjtBQUNBLFNBQUtpQyxNQUFMLEdBQWMscUJBQVcsS0FBS2xDLFdBQWhCLEVBQTZCLEtBQUtDLE9BQWxDLENBQWQ7O0FBRUE7OztBQUdBLFNBQUtrQyxHQUFMLEdBQVcsS0FBS1AsWUFBaEI7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O2tDQWF5QjtBQUFBLFVBQWJRLE1BQWEsdUVBQUosRUFBSTs7QUFDdkIsVUFBSUEsT0FBT0MsY0FBUCxLQUEwQkMsU0FBOUIsRUFBeUM7QUFDdkNGLGVBQU9DLGNBQVAsR0FBd0IsS0FBS3JDLFdBQUwsQ0FBaUJ1QyxhQUF6QztBQUNEO0FBQ0QsYUFBT3hDLE1BQU15QyxXQUFOLENBQWtCLEtBQUt4QyxXQUFMLENBQWlCeUMsVUFBbkMsRUFBK0NMLE1BQS9DLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7OztzQ0FPa0JNLE0sRUFBUTtBQUN4QixhQUFPLEtBQUsxQyxXQUFMLENBQWlCMkMsaUJBQWpCLENBQW1DRCxNQUFuQyxDQUFQO0FBQ0Q7Ozs7OztBQUdIOzs7Ozs7Ozs7OztBQVNBM0MsTUFBTXlDLFdBQU4sR0FBb0IsVUFBQ0MsVUFBRCxFQUFhTCxNQUFiLEVBQXdCO0FBQzFDLE1BQUksRUFBRUssc0JBQXNCRyxNQUF4QixDQUFKLEVBQXFDO0FBQ25DLFFBQUksQ0FBQyxhQUFHQyxVQUFILENBQWNKLFVBQWQsQ0FBTCxFQUFnQztBQUM5QixZQUFNLElBQUlLLEtBQUosYUFBbUJMLFVBQW5CLG1CQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLG1CQUFhLGFBQUdNLFlBQUgsQ0FBZ0JOLFVBQWhCLENBQWI7QUFDRDtBQUNGO0FBQ0QsU0FBTzVDLHFCQUFxQm1ELFFBQXJCLENBQThCUCxVQUE5QixFQUEwQ0wsTUFBMUMsQ0FBUDtBQUNELENBVEQ7O0FBV0E7Ozs7Ozs7OztBQVNBckMsTUFBTTRDLGlCQUFOLEdBQTBCLFVBQUNNLE1BQUQsRUFBU0MsTUFBVCxFQUFpQlIsTUFBakIsRUFBNEI7QUFDcEQsU0FBTzVDLHNCQUFzQmtELFFBQXRCLENBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0NSLE1BQS9DLENBQVA7QUFDRCxDQUZEOztrQkFJZTNDLEsiLCJmaWxlIjoiTmV4bW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgQ3JlZGVudGlhbHMgZnJvbSBcIi4vQ3JlZGVudGlhbHNcIjtcbmltcG9ydCBKd3RHZW5lcmF0b3IgZnJvbSBcIi4vSnd0R2VuZXJhdG9yXCI7XG5pbXBvcnQgSGFzaEdlbmVyYXRvciBmcm9tIFwiLi9IYXNoR2VuZXJhdG9yXCI7XG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9NZXNzYWdlXCI7XG5pbXBvcnQgVm9pY2UgZnJvbSBcIi4vVm9pY2VcIjtcbmltcG9ydCBOdW1iZXIgZnJvbSBcIi4vTnVtYmVyXCI7XG5pbXBvcnQgVmVyaWZ5IGZyb20gXCIuL1ZlcmlmeVwiO1xuaW1wb3J0IE51bWJlckluc2lnaHQgZnJvbSBcIi4vTnVtYmVySW5zaWdodFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCBBY2NvdW50IGZyb20gXCIuL0FjY291bnRcIjtcbmltcG9ydCBDYWxsc1Jlc291cmNlIGZyb20gXCIuL0NhbGxzUmVzb3VyY2VcIjtcbmltcG9ydCBGaWxlc1Jlc291cmNlIGZyb20gXCIuL0ZpbGVzUmVzb3VyY2VcIjtcbmltcG9ydCBDb252ZXJzaW9uIGZyb20gXCIuL0NvbnZlcnNpb25cIjtcbmltcG9ydCBNZWRpYSBmcm9tIFwiLi9NZWRpYVwiO1xuaW1wb3J0IFJlZGFjdCBmcm9tIFwiLi9SZWRhY3RcIjtcbmltcG9ydCBIdHRwQ2xpZW50IGZyb20gXCIuL0h0dHBDbGllbnRcIjtcbmltcG9ydCBOdWxsTG9nZ2VyIGZyb20gXCIuL051bGxMb2dnZXJcIjtcbmltcG9ydCBDb25zb2xlTG9nZ2VyIGZyb20gXCIuL0NvbnNvbGVMb2dnZXJcIjtcblxuY29uc3Qgand0R2VuZXJhdG9ySW5zdGFuY2UgPSBuZXcgSnd0R2VuZXJhdG9yKCk7XG5jb25zdCBoYXNoR2VuZXJhdG9ySW5zdGFuY2UgPSBuZXcgSGFzaEdlbmVyYXRvcigpO1xuXG5jbGFzcyBOZXhtbyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkZW50aWFscyAtIE5leG1vIEFQSSBjcmVkZW50aWFsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gY3JlZGVudGlhbHMuYXBpS2V5IC0gdGhlIE5leG1vIEFQSSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNyZWRlbnRpYWxzLmFwaVNlY3JldCAtIHRoZSBOZXhtbyBBUEkgc2VjcmV0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5kZWJ1ZyAtIGB0cnVlYCB0byB0dXJuIG9uIGRlYnVnIGxvZ2dpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMubG9nZ2VyIC0gU2V0IGEgY3VzdG9tIGxvZ2dlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnQgLSBBIHZhbHVlIHRvIGFwcGVuZCB0byB0aGUgdXNlciBhZ2VudC5cbiAgICogICAgICAgICAgICAgICAgICAgIFRoZSB2YWx1ZSB3aWxsIGJlIHByZWZpeGVkIHdpdGggYSBgL2BcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zID0geyBkZWJ1ZzogZmFsc2UgfSkge1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBDcmVkZW50aWFscy5wYXJzZShjcmVkZW50aWFscyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIElmIG5vIGxvZ2dlciBoYXMgYmVlbiBzdXBwbGllZCBidXQgZGVidWcgaGFzIGJlZW4gc2V0XG4gICAgLy8gZGVmYXVsdCB0byB1c2luZyB0aGUgQ29uc29sZUxvZ2dlclxuICAgIGlmICghdGhpcy5vcHRpb25zLmxvZ2dlciAmJiB0aGlzLm9wdGlvbnMuZGVidWcpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5sb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dlcigpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5sb2dnZXIpIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGxvZ2dpbmdcbiAgICAgIHRoaXMub3B0aW9ucy5sb2dnZXIgPSBuZXcgTnVsbExvZ2dlcigpO1xuICAgIH1cblxuICAgIGxldCB1c2VyQWdlbnQgPSBcIm5leG1vLW5vZGUvVU5LTk9XTiBub2RlL1VOS05PV05cIjtcbiAgICB0cnkge1xuICAgICAgdmFyIHBhY2thZ2VEZXRhaWxzID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwicGFja2FnZS5qc29uXCIpKTtcbiAgICAgIHVzZXJBZ2VudCA9IGBuZXhtby1ub2RlLyR7XG4gICAgICAgIHBhY2thZ2VEZXRhaWxzLnZlcnNpb25cbiAgICAgIH0gbm9kZS8ke3Byb2Nlc3MudmVyc2lvbi5yZXBsYWNlKFwidlwiLCBcIlwiKX1gO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBsb2FkIHBhY2thZ2UgZGV0YWlsc1wiKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLnVzZXJBZ2VudCA9IHVzZXJBZ2VudDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFwcGVuZFRvVXNlckFnZW50KSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXNlckFnZW50ICs9IGAgJHt0aGlzLm9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnR9YDtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGxlZ2FjeSwgZXZlcnl0aGluZyBzaG91bGQgdXNlIHJlc3Qgb3IgYXBpIGdvaW5nIGZvcndhcmRcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbih7IGhvc3Q6IFwicmVzdC5uZXhtby5jb21cIiB9LCB0aGlzLm9wdGlvbnMpLFxuICAgICAgdGhpcy5jcmVkZW50aWFsc1xuICAgICk7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBkaWZmZXJlbnQgaG9zdHMsIHNvIHdlIHVzZSB0d28gZGlmZmVyZW50IEh0dHBDbGllbnRzXG4gICAgdGhpcy5vcHRpb25zLmFwaSA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbih7IGhvc3Q6IFwiYXBpLm5leG1vLmNvbVwiIH0sIHRoaXMub3B0aW9ucyksXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzXG4gICAgKTtcbiAgICB0aGlzLm9wdGlvbnMucmVzdCA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbih7IGhvc3Q6IFwicmVzdC5uZXhtby5jb21cIiB9LCB0aGlzLm9wdGlvbnMpLFxuICAgICAgdGhpcy5jcmVkZW50aWFsc1xuICAgICk7XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgTWVzc2FnZSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMudm9pY2UgPSBuZXcgVm9pY2UodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLm51bWJlciA9IG5ldyBOdW1iZXIodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLnZlcmlmeSA9IG5ldyBWZXJpZnkodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLm51bWJlckluc2lnaHQgPSBuZXcgTnVtYmVySW5zaWdodCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuYXBwbGljYXRpb25zID0gbmV3IEFwcCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuYWNjb3VudCA9IG5ldyBBY2NvdW50KHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5jYWxscyA9IG5ldyBDYWxsc1Jlc291cmNlKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5maWxlcyA9IG5ldyBGaWxlc1Jlc291cmNlKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5jb252ZXJzaW9uID0gbmV3IENvbnZlcnNpb24odGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLm1lZGlhID0gbmV3IE1lZGlhKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5yZWRhY3QgPSBuZXcgUmVkYWN0KHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIG5leG1vLmFwcGxpY2F0aW9uc1xuICAgICAqL1xuICAgIHRoaXMuYXBwID0gdGhpcy5hcHBsaWNhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBKU09OIFdlYiBUb2tlbiAoSldUKS5cbiAgICpcbiAgICogVGhlIHByaXZhdGUga2V5IHVzZWQgdXBvbiBOZXhtbyBpbnN0YW5jZSBjb25zdHJ1Y3Rpb24gd2lsbCBiZSB1c2VkIHRvIHNpZ25cbiAgICogdGhlIEpXVC4gVGhlIGFwcGxpY2F0aW9uX2lkIHlvdSB1c2VkIHVwb24gTmV4bW8gaW5zdGFuY2UgY3JlYXRpb24gd2lsbCBiZVxuICAgKiBpbmNsdWRlZCBpbiB0aGUgY2xhaW1zIGZvciB0aGUgSldULCBob3dldmVyIHRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYnkgcGFzc2luZ1xuICAgKiBhbiBhcHBsaWNhdGlvbl9pZCBhcyBwYXJ0IG9mIHRoZSBjbGFpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjbGFpbXMgLSBuYW1lL3ZhbHVlIHBhaXIgY2xhaW1zIHRvIHNpZ24gd2l0aGluIHRoZSBKV1RcbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICAgKi9cblxuICBnZW5lcmF0ZUp3dChjbGFpbXMgPSB7fSkge1xuICAgIGlmIChjbGFpbXMuYXBwbGljYXRpb25faWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xhaW1zLmFwcGxpY2F0aW9uX2lkID0gdGhpcy5jcmVkZW50aWFscy5hcHBsaWNhdGlvbklkO1xuICAgIH1cbiAgICByZXR1cm4gTmV4bW8uZ2VuZXJhdGVKd3QodGhpcy5jcmVkZW50aWFscy5wcml2YXRlS2V5LCBjbGFpbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgU2lnbmF0dXJlIEhhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwYXJhbXMgdG8gZ2VuZXJhdGUgaGFzaCBmcm9tXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAgICovXG4gIGdlbmVyYXRlU2lnbmF0dXJlKHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlU2lnbmF0dXJlKHBhcmFtcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIEpTT04gV2ViIFRva2VuIChKV1QpLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcn0gcHJpdmF0ZUtleSAtIHRoZSBwYXRoIHRvIHRoZSBwcml2YXRlIGtleSBjZXJ0aWZpY2F0ZVxuICogICAgICAgICAgdG8gYmUgdXNlZCB3aGVuIHNpZ25pbmcgdGhlIGNsYWltcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGFpbXMgLSBuYW1lL3ZhbHVlIHBhaXIgY2xhaW1zIHRvIHNpZ24gd2l0aGluIHRoZSBKV1RcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gKi9cbk5leG1vLmdlbmVyYXRlSnd0ID0gKHByaXZhdGVLZXksIGNsYWltcykgPT4ge1xuICBpZiAoIShwcml2YXRlS2V5IGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwcml2YXRlS2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIFwiJHtwcml2YXRlS2V5fVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJpdmF0ZUtleSA9IGZzLnJlYWRGaWxlU3luYyhwcml2YXRlS2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGp3dEdlbmVyYXRvckluc3RhbmNlLmdlbmVyYXRlKHByaXZhdGVLZXksIGNsYWltcyk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgU2lnbmF0dXJlIEhhc2guXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIHRoZSBtZXRob2QgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBoYXNoXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VjcmV0IC0gdGhlIHNlY3JldCB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIGhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwYXJhbXMgdG8gZ2VuZXJhdGUgaGFzaCBmcm9tXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICovXG5OZXhtby5nZW5lcmF0ZVNpZ25hdHVyZSA9IChtZXRob2QsIHNlY3JldCwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBoYXNoR2VuZXJhdG9ySW5zdGFuY2UuZ2VuZXJhdGUobWV0aG9kLCBzZWNyZXQsIHBhcmFtcyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOZXhtbztcbiJdfQ==